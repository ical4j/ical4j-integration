import aQute.bnd.gradle.Bundle

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.2.0'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.2'
    id "nebula.provided-base" version "3.0.3"
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'nebula.optional-base'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.mnode.ical4j:ical4j:$ical4jVersion", "org.mnode.ical4j:ical4j-vcard:$ical4jVCardVersion",
        "org.apache.camel:camel-core:$camelVersion", "org.quartz-scheduler:quartz:$quartzVersion",
        "com.rometools:rome:$romeVersion"

    testCompile "org.codehaus.groovy:groovy:$groovyVersion"

    testImplementation platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0"),
        "org.spockframework:spock-core",
        "org.slf4j:slf4j-log4j12:$slf4jVersion"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task bundle(type: Bundle) {
    from(project.rootDir) {
        include "LICENSE.txt"
    }
    from sourceSets.main.output
    bndfile = 'bnd.bnd'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

jar.enabled = false

artifacts {
    archives bundle
    archives javadocJar
    archives sourcesJar
}

group = 'org.mnode.ical4j'
description = '''\
iCalendar support for integration architectures like Apache Camel
'''

scmVersion {
    tag {
        prefix = 'ical4j-integration'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
        'master': 'simple'
    ]
}
version = scmVersion.version

publishing {
    publications {
        ical4j_integration(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom.withXml {
                asNode().appendNode('name', project.name)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', 'http://ical4j.github.io')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/ical4j/ical4j-integration')
                scmNode.appendNode('connection', 'scm:git@github.com:ical4j/ical4j-integration.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:ical4j/ical4j-integration.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'iCal4j - License')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/ical4j/ical4j/master/LICENSE')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }
}

signing {
    required = true
    sign publishing.publications.ical4j_integration
}
